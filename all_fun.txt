=========================================A===========================

import zipfile--------------------------------------
    
def unzip(file, path): # функция для разархивирования
    with zipfile.ZipFile(file, 'r') as zip_file:
        zip_file.extractall(path)
file - путь от куда
path - путь куда

---------------------------------
для изменения формата xml на yolo - !git clone https://github.com/bjornstenger/xml2yolo.git 
требуется поменять классы в convert.py и переместить в папку с разметкой

import os ----------------------------------------
# удаляем файлы в формате xml
dir_name = "C:/worning/mashinka/car_numbers/all/2/annotations"
test = os.listdir(dir_name)

for item in test:
    if item.endswith(".xml"):
        os.remove(os.path.join(dir_name, item))
        
# удаляем файл для изменения формата
os.remove('C:/worning/mashinka/car_numbers/all/2/annotations/convert.py')

import os -------------------------------
from distutils.dir_util import copy_tree ----------------------------------


content_dir = {'1': ['test', 'train', 'valid'], '3': ['train', 'valid']}

data_root = 'C:/worning/mashinka/car_numbers/all'

new_folder = 'C:/worning/mashinka/car_numbers/new'
mode = 0o777
# создаем папку куда будем копировать файлы
if not os.path.exists(new_folder):
   os.mkdir(new_folder, mode)
for sub_dir in content_dir:
    print(content_dir[sub_dir])
    for content in content_dir[sub_dir]:
        print(content)
        path_to_content = sub_dir + "/" + content
        dir_to_move = data_root + '/' + path_to_content
        print(dir_to_move)
        # копируем файлы
        copy_tree(dir_to_move, new_folder)

from pathlib import Path -------------------------------------------------

path_back = Path('C:/worning/mashinka/car_numbers/all')
print('Сумма данных изначально:', sum(1 for x in path_back.rglob('*') if x.is_file()))
path_all = Path('C:/worning/mashinka/car_numbers/new')
print('Сумма данных после переноса в одну папку:',  sum(1 for x in path_all.rglob('*') if x.is_file()))

import os ----------------------------------

data_root = 'C:/worning/mashinka/car_numbers/new/labels'
num = 0

source_dir = os.path.join(data_root)
for file_name in os.listdir(source_dir):
    if os.stat(data_root + "/" + file_name).st_size == 0:
        print('Пропуск', file_name)
        num += 1
print(num)

-------------------------------------
если есть пропуски - !git clone https://github.com/ManzarIMalik/YOLO-Annotation-Tool.git

import os -------------------------------------------------------
with open("C:/worning/mashinka/car_numbers/new/images/all.txt",'w') as a: 
    for path, subdirs, files in os.walk('C:/worning/mashinka/car_numbers/new/images/'):
        for file in files:
            f = os.path.join(path, file)
            a.write(str(f)+os.linesep)

--------------------------------------
!git clone https://github.com/Taeyoung96/Yolo-to-COCO-format-converter.git
!python C:/worning/mashinka/car_numbers/a/Yolo-to-COCO-format-converter/main.py --path C:/worning/mashinka/car_numbers/new/images/ --output ../data.json

=========================================B==========================================

import torch ------------------------------------------------------------

print(f"Is CUDA supported by this system?{torch.cuda.is_available()}")
print(f"CUDA version: {torch.version.cuda}")

# Storing ID of current CUDA device
cuda_id = torch.cuda.current_device()
print(f"ID of current CUDA device:{torch.cuda.current_device()}")
    
print(f"Name of current CUDA device:{torch.cuda.get_device_name(cuda_id)}")
print(f"How many devices {torch.cuda.device_count()}")

import json -------- мпорт из одного файла
# разделяем данные в списки изображений и разметки
# открываем файл json
f = open('C:/worning/mashinka/car_numbers/a/data.json')

# читаем файл json
data = json.load(f)

# разделяем фотографии и разметку
images = data['images']
labels = data['annotations']
print(labels)

import os
labels = [os.path.join('C:/worning/mashinka/car_numbers/new/images', x) for x in os.listdir('C:/worning/mashinka/car_numbers/new/images')if x.endswith('.txt')]
images = [os.path.join('C:/worning/mashinka/car_numbers/new/images', x) for x in os.listdir('C:/worning/mashinka/car_numbers/new/images')if x.endswith('.jpg') or x.endswith('.png')]

from sklearn.model_selection import train_test_split -------------------------------------
# производим разделение всех наших данных на Тренировочные и валидационные
train_images, val_images, train_annotations, val_annotations = train_test_split(images, labels, test_size=0.15, random_state=42)
# валидационные данные делим на тестовые и валидационные, чтобы одни использовать для тестирования пока обучается, а вторые для тестирования после обучения
val_images, test_images, val_annotations, test_annotations = train_test_split(val_images, val_annotations, test_size=0.5, random_state=42)

import os ---------------------------------------------------------------------------------
# Создаем папки куда будем переносить наши разбитые на 3 набора данные фотографий
parent = 'new'
dirs = 'images/train', 'images/val', 'images/test', 'labels/train', 'labels/val', 'labels/test'
for dir in dirs:
    path = os.path.join(parent, dir)
    # проверяем существование папки чтобы не создавать если уже есть
    if not os.path.exists(path):
        # создаем папку
        os.makedirs(path)

import shutil -----------------------------------------------------------------------
#Утилитная функция для переноса файлов 
def move_files_to_folder(list_of_files, destination_folder):
    for f in list_of_files:
        try:
            shutil.copy(f, destination_folder)
        except:
            print(f)
            assert False

# Переносим файлы по из папкам учитывая разделение
move_files_to_folder(train_images, 'new/images/train')
move_files_to_folder(val_images, 'new/images/val/')
move_files_to_folder(test_images, 'new/images/test/')
move_files_to_folder(train_annotations, 'new/labels/train/')
move_files_to_folder(val_annotations, 'new/labels/val/')
move_files_to_folder(test_annotations, 'new/labels/test/')

import os ------------------------------------------------------------------------------
# Создаем папки куда будем переносить наши разбитые на 3 набора данные фотографий
parent = 'yolov5'
dirs = 'dataset/annatations', 'dataset/train/images', 'dataset/train/labels'
for dir in dirs:
    path = os.path.join(parent, dir)
    # проверяем существование папки чтобы не создавать если уже есть
    if not os.path.exists(path):
        # создаем папку
        os.makedirs(path)

!git clone https://github.com/ultralytics/yolov5--------------------------------------
!pip install -r yolov5/requirements.txt
!cd /content/yolov5

from distutils.dir_util import copy_tree -------------------------------------------

copy_tree('C:/worning/mashinka/car_numbers/b/new/labels/train', 'C:/worning/mashinka/car_numbers/b/yolov5/dataset/train/labels')

copy_tree('C:/worning/mashinka/car_numbers/b/new/images/train', 'C:/worning/mashinka/car_numbers/b/yolov5/dataset/train/images')

shutil.copy2('C:/worning/mashinka/car_numbers/a/data.json', 'C:/worning/mashinka/car_numbers/b/yolov5/dataset/annatations')

!python yolov5/train.py --data data.yaml --weights yolov5s.pt --epochs 10 --device 0 --batch-size 6 ----------------------

from yolov5.detect import run ---------------------------------------
run(save_crop=True)

!pip install easyocr ----------------------------------------
для файла
import easyocr
reader = easyocr.Reader(['en','ru'], gpu = True)
_, text, __ = reader.readtext('yolov5/runs/detect/exp3/crops/plate/Cars273.jpg')[0]
print(text)
для папки
import os
dir_name = "yolov5/runs/detect/exp3/crops/plate"
imgs = os.listdir(dir_name)
strok = []


for img in imgs:
    print(img)
    img_text = reader.readtext(f'{dir_name}/{img}')
    final_text = ""

    for _, text, __ in img_text: # _ = bounding box, text = text and __ = confident level
        final_text += " "
        final_text += text
    strok.append(final_text)

===================================================================
# функция для обрезки фотографий
from yolov5.detect import run
# библиотека для чтения текста с фото
import easyocr
reader = easyocr.Reader(['en','ru'], gpu = True)
# run(save_crop=True)
# _, text, __ = reader.readtext()[0]
# print(text)

# библиотека для подключения к системе
import os
dir_name = str(run())
imgs = os.listdir(dir_name)
strok = []


for img in imgs:
    print(img)
    img_text = reader.readtext(f'{dir_name}/{img}')
    final_text = ""

    for _, text, __ in img_text: # _ = bounding box, text = text and __ = confident level
        final_text += " "
        final_text += text
    strok.append(final_text)
print(strok)[0]

=================================================================================

АПИ

import streamlit as st
from PIL import Image

source_link = st.text_input('Введите ссылку (путь) до файла: ')

st.write("Для правильной работы сохраняйте фотографии по данному пути: C:/worning/mashinka/car_numbers/b/new/images/test/")

source_foto = st.file_uploader('Загрузка фото')
if source_foto:
    source_foto = 'C:/worning/mashinka/car_numbers/b/new/images/test/' + source_foto.name

st.write("При заполнении двух полей, распазнавание будет проходить по первому (ссылке)")

button = st.button('Рассчитать')

if button:
    # функция для обрезки фотографий
    from yolov5.detect import run
    # библиотека для чтения текста с фото
    import easyocr
    reader = easyocr.Reader(['en','ru'], gpu = True)

    # библиотека для подключения к системе
    import os
    if source_link: 
        dir_name = str(run(source=source_link, save_crop=True)) + '/crops/plate/'

    elif source_foto:
        dir_name = str(run(source=source_foto, save_crop=True)) + '/crops/plate/'
    imgs = os.listdir(dir_name)
    strok = []


    for img in imgs:
        print(img)
        image = Image.open(dir_name + img)
        st.image(image)
        img_text = reader.readtext(f'{dir_name}{img}')
        final_text = ""

        for _, text, __ in img_text: # _ = bounding box, text = text and __ = confident level
            final_text += " "
            final_text += text
        strok.append(final_text)
    st.write('Номер: ', strok[0])